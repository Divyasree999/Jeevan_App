package com.cg.jeevanonlineterminsurance.control;
import com.cg.jeevanonlineterminsurance.control.CustomerController;
import com.cg.jeevanonlineterminsurance.entity.Customer;
import com.cg.jeevanonlineterminsurance.service.CustomerService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import java.util.ArrayList;
import java.util.List;
import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
@WebMvcTest(value = CustomerController.class)
public class CustomerControllerTest {
	@Autowired
	private MockMvc mockMvc;
	@MockBean
	private CustomerService customerService;
	// add a customer
	@Test
	public void testCreateCustomer() throws Exception {
		String URI = "/api/v2/savecustomer";
		Customer customer = new Customer();
		customer.setCustomerId(10178263);
		customer.setPolicyId(40127382);
		customer.setCustomerName("Hema");
		customer.setEmail("hema26@gmail.com");
		customer.setMobileNo("7845326170");
		customer.setAge(27);
		customer.setDob("16-07-1993");

		String jsonInput = this.converttoJson(customer);

		Mockito.when(customerService.saveCustomer(Mockito.any(Customer.class))).thenReturn(customer);
		MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.post(URI).accept(MediaType.APPLICATION_JSON)
				.content(jsonInput).contentType(MediaType.APPLICATION_JSON)).andReturn();
		MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
		String jsonOutput = mockHttpServletResponse.getContentAsString();
		assertThat(jsonInput).isEqualTo(jsonOutput);
		Assert.assertEquals(HttpStatus.OK.value(), mockHttpServletResponse.getStatus());
	}
    // testing of get customer
	@Test
	public void testGetCustomerById() throws Exception {
		String URI = "/api/v2/findcustomer/{id}";
		Customer customer = new Customer();
		customer.setCustomerId(10178267);
		customer.setPolicyId(401273851);
		customer.setCustomerName("Suraj");
		customer.setEmail("suraj7883@gmail.com");
		customer.setMobileNo("7879101818");
		customer.setAge(28);
		customer.setDob("07-02-1993");

		String jsonInput = this.converttoJson(customer);

		Mockito.when(customerService.findCustomerById(Mockito.any())).thenReturn(customer);
		// Assert.assertTrue(customerService.findCustomerById());
		MvcResult mvcResult = this.mockMvc
				.perform(MockMvcRequestBuilders.get(URI, 10178267).accept(MediaType.APPLICATION_JSON)).andReturn();
		MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
		String jsonOutput = mockHttpServletResponse.getContentAsString();

		assertThat(jsonInput).isEqualTo(jsonOutput);
	}
    // testing of update customer
	@Test
	public void testUpdateCustomer() throws Exception {
		String URI = "/api/v2/updatecustomer/{id}";
		Customer customer = new Customer();
		customer.setCustomerId(10178263);
		customer.setPolicyId(40127382);
		customer.setCustomerName("Hema");
		customer.setEmail("hema26@gmail.com");
		customer.setMobileNo("7845326170");
		customer.setAge(27);
		customer.setDob("16-07-1993");
		String jsonInput = this.converttoJson(customer);

		Mockito.when(customerService.updateCustomer(Mockito.any(), Mockito.any())).thenReturn(customer);
		MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.put(URI, 10178263)
				.accept(MediaType.APPLICATION_JSON).content(jsonInput).contentType(MediaType.APPLICATION_JSON))
				.andReturn();
		MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
		String jsonOutput = mockHttpServletResponse.getContentAsString();

		assertThat(jsonInput).isEqualTo(jsonOutput);
	}
    // testing of delete customer
	@Test
	public void testDeleteCustomer() throws Exception {
		String URI = "/api/v2/deletecustomer/{id}";
		Customer customer = new Customer();
		customer.setCustomerId(10178263);
		customer.setPolicyId(40127382);
		customer.setCustomerName("Hema");
		customer.setEmail("hema26@gmail.com");
		customer.setMobileNo("7845326170");
		customer.setAge(27);
		customer.setDob("16-07-1993");

		Mockito.when(customerService.findCustomerById(Mockito.any())).thenReturn(customer);
		Mockito.when(customerService.deleteCustomerById(Mockito.any())).thenReturn(true);
		MvcResult mvcResult = this.mockMvc
				.perform(MockMvcRequestBuilders.delete(URI, 10178263).accept(MediaType.APPLICATION_JSON)).andReturn();
		MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();

		Assert.assertNotEquals(HttpStatus.OK.value(), mockHttpServletResponse.getStatus());
	}
    // testing to get customer details
	@Test
	public void testGetAllCustomers() throws Exception {
		String URI = "/api/v2/getAllCustomers";
		Customer customer = new Customer();
		customer.setCustomerId(10178263);
		customer.setPolicyId(40127382);
		customer.setCustomerName("Hema");
		customer.setEmail("hema26@gmail.com");
		customer.setMobileNo("7845326170");
		customer.setAge(27);
		customer.setDob("16-07-1993");

		Customer customer1 = new Customer();
		customer1.setCustomerId(10178263);
		customer1.setPolicyId(40127382);
		customer1.setCustomerName("Hema");
		customer1.setEmail("hema26@gmail.com");
		customer1.setMobileNo("7845326170");
		customer1.setAge(27);
		customer1.setDob("16-07-1993");
		Customer customer2 = new Customer();
		customer2.setCustomerId(12098254);
		customer2.setPolicyId(34527672);
		customer2.setCustomerName("Divya");
		customer2.setEmail("divya453@gmail.com");
		customer2.setMobileNo("8008321312");
		customer2.setAge(21);
		customer2.setDob("12-07-1999");
		Customer customer3 = new Customer();
		customer3.setCustomerId(12278263);
		customer3.setPolicyId(42227382);
		customer3.setCustomerName("Nanda");
		customer3.setEmail("nanda26@gmail.com");
		customer3.setMobileNo("6678326170");
		customer3.setAge(27);
		customer3.setDob("13-07-1993");
		Customer customer4 = new Customer();
		customer4.setCustomerId(10078263);
		customer4.setPolicyId(40227382);
		customer4.setCustomerName("Nandu");
		customer4.setEmail("nandu26@gmail.com");
		customer4.setMobileNo("6678326170");
		customer4.setAge(27);
		customer4.setDob("13-06-1993");
		List<Customer> customerList = new ArrayList<>();
		customerList.add(customer);
		customerList.add(customer1);
		customerList.add(customer2);
		customerList.add(customer3);
		customerList.add(customer4);
		String jsonInput = this.converttoJson(customerList);

		Mockito.when(customerService.getAllCustomers()).thenReturn(customerList);
		MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get(URI).accept(MediaType.APPLICATION_JSON))
				.andReturn();
		MockHttpServletResponse mockHttpServletResponse = mvcResult.getResponse();
		String jsonOutput = mockHttpServletResponse.getContentAsString();

		assertThat(jsonInput).isEqualTo(jsonOutput);
	}

	private String converttoJson(Object customer) throws JsonProcessingException {
		ObjectMapper objectMapper = new ObjectMapper();
		return objectMapper.writeValueAsString(customer);
	}
}
